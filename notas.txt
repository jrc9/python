Python es un lenguaje de alto nivel, es de tipado dinamico y fuerte, orientado a objetos y es interpretado.

Se recomienda poner una instruccion por linea, si quieres poner 2 instrucciones en una sola linea es necesario poner ;

TIPOS DE DATOS

Numericos: int, float y complejos
Texto-----las comillas pueden llevar comilla simple, doble y triple
Booleano: true o false

------------------------------------------------------------------------------------

Tiene los operadores comunes y solo se agregan los especiales

IS 
IS NOT 
IN 
NOT IN 

------------------------------------------------------------------------------------
nombre="Jorge"
print(type(nombre))

num1=1
num2=2

if(num1>num2):
    print("es mayor")
else:
    print("No es mayor")
------------------------------------------------------------------------------------
FUNCIONES 

def nombre_funcion(): 

def funcion(a,b):
      suma=a+b
      print(suma)

funcion(3,4)
------------------------------------------------------------------------------------
LISTAS

Es como los arrays, pero estas nos permiten guardar diferentes tipos de datos y no solo una.

Se pueden expandir dinamicamente añadiendo nuevo elementos.

nombreLista=[elem1,elem2,elem3]

----------------------------------

Para acceder a una porcion de la lista:

nombres=["Jorge","Sebas","Baños"]

print(nombres[0:1])

---------------------------------
Para agregar al final de la lista se utiliza la funcion append

nombres.append("Mario")
--------------------------------
Para insertar en cualquier parte de la lista:

nombre.insert(2,"Yare")                --->En este caso inserta en el indice 2
--------------------------------
Para concatenar listas:

nombre.extend(["Karla","Alexia"])
-------------------------------
Para que te devuelva el indice de un elemento de la lista:

nombres.index("Jorge")
-------------------------------
Para saber si un elemento está en la lista:

"Pepe" in nombres     ->>> devuelve true o false 
-------------------------------
Para eliminar elementos se usa:

nombres.remove("Jorge")
-------------------------------
Para eliminar el ultimo elemento de la lista:

nombres.pop();

-------------------------------
Hay operadores que al trabajar con listas el + concatena listas y el * repite la lista las veces por la que lo multiplique

nombreLista=[elem1,elem2,elem3] * 3
----------------------------------------------------------------
TUPLAS

Son listas inmutables(que no cambia) es decir que no se puede modificar despues de su creación.
No se puede añadir ni eliminar.

Permite extraer porciones de la lista(no lo modificamos solo lo obtenemos)

si permiten comprobar si un elemento está dentro de una tupla.

Son mas rapidas que las listas, ocupan menos espacio, formatean strings y pueden usarse como claves en un diccionario.


----------------------------------------------------------------
nombreLista=(elem1,elem2,elem3)

es como la lista pero con parentesis

para acceder a los elementos es igual que en el la lista nombre[Lista1]
-----------------------------------------------------------------
CONVERTIR TUPLA A LISTA Y VICEVERSA

miLista=list(miTupla)

miTupla=tuple(miLista)
-----------------------------------------------------------
SABER SI UN ELEMENTO ESTA EN UA TUPLA 

"Juan" in miTupla     ----------> devuelve true o false 
----------------------------------------------------------
COUNT 

Te dice cuantos elementos de los que buscamos estan en una tupla 

miTupla.count("Jorge")  ---------> devuelve el numero de veces que Jorge está en la tupla
----------------------------------------------------------
LEN

Da la longitud de una tupla.

len(miTupla)
----------------------------------------------------------
TUPLAS UNITARIAS

Son tuplas con un solo elemento 

miTupla=("Juan",)
------------------------------------------------------------
DESEMPAQUETADO DE TUPLA

Permiter asignar a variables elementos de la tupla.

miTupla=("Jorge",1,2,3)
nombre, num1, num2, num3=miTupla;
----------------------------------------------------------------------------------------------------------------------------

DICCIONARIOS

Estructura de datos que nos permite alamacenar valores de diferente tipo e incluso listas y otros dicionarios.

Los datos se almacenan asociados a una clave de tal forma que se crea una asociacion de tipo clave:valor para cada elemento almacenado.

Los elementos no estan ordenados, el orden es indiferente a la hora de almacenar info en un diccionario.

miDiccionario{"Alemania":"Berlin", "Mexico":"CDMX", "Francia":"Paris"}

Si se quiere ver la capital de un pais:

print(miDiccionario["Francia"])   --------> Esto devolvera "Paris"
----------------------------------------------------------------------
AGREGAR ELEMENTO A UN DICCIONARIO 

miDiccionario["Italia"]="Roma"
----------------------------------------------------------------------
MODIFICAR DICCIONARIO 

Solo hay que sobreecribir el valor anterior siempre y cuando le des la misma clave
----------------------------------------------------------------------
ELIMINAR DE UN DICCIONARIO 

del miDiccionario["Mexico"]

Solo hay que dar la clave 
----------------------------------------------------------------------
ASIGNAR UNA TUPLA A LAS CLAVES DE UN DICCIONARIO 

miTupla=["ESPAÑA","FRANCIA","MEXICO"]
miDiccionario{mitupla[0]:"Madrid",miTupla[1]:"Paris"}
----------------------------------------------------------------------
DICCIONARIO ALMACENE UNA TUPLA 

miDiccionario{"años":[1991,1992,1993]}
----------------------------------------------------------------------
GUARDAR DICCIONARIO EN OTRO DICCIONARIO

miDiccionario{"años":{1991,1992,1993}}
----------------------------------------------------------------------
miDiccionario.keys() ------> devuelve las claves del diccionario 
miDiccionario.values() ---> devuelve los valores de las claves
len(miDiccionario)--------> devuelva LA longitud del diccionario 
-------------------------------------------------------------------------------------------------------------------
CONDICIONALES 

if num<5:
    variable="si"

Es importante dejar la sangria para inidicar que son instrucciones del if 
-----------------------------------------------------------------------------
INPUT()

Sirve para recibir datos por teclado

entrada=input()   ------------> este metodo input recibe un string como entrada 

Puede recibir parametros input("Introduce algo")
------------------------------------------------------------------------------
TRANSFORMAR STRING A ENTERO

int(texto)   ----->transforma a entero un string 
------------------------------------------------------------------------------
ELSE Y ELIF

if num<5:
    instruccion 
elif num2>7:
    instruccion
else:
    instruccion 
-------------------------------------------------------------
SWITCH 

No existe la instruccion switch en python 

En python se pueden concatenar operadores de comparacion
-------------------------------------------------------------
CONCATENACION DE OPERADORES

edad 7

if 0<edad<100:
    instruccion
else:
    instruccion 

El flujo de ejecucion es de izquierda a derecha
------------------------------------------------------------
CONVERTIR A STRING 

str(variable)
------------------------------------------------------------
AND y OR 

if a<1 and b>2 or c>3:
    instruccion 
------------------------------------------------------------
IN 

If asignatura in ("informatica", "Software"):
    Instruccion 

Es case sensitive
------------------------------------------------------------
lower() upper()

Transforman a minusculas o mayusculas una cadena 

a=b.lower();
a=b.upper();
------------------------------------------------------------
BUCLES FOR DETERMINADO

for variable in elemento a recorrer:

for i in [1,2,3]:
    print("Hola")

Esto ejecutaria 3 veces el print ya que recorre la lista 
--------
for i in [1,2,3]:
    print(i)

Imprimira el valor de i que va en el B
------------------------------------------------------------
for i in [1,2,3]:
    print(i, end"") 

con esto le decimos que no imprima con salto de linea
------------------------------------------------------------
For i in "jorge":
    print(i)

imprime cada letra de la cadena 
------------------------------------------------------------
RANGE 

for i in range(5):
    print("Hola")

esto imprimira hola 5 veces 
-----------------------------------------------------------
for i in range[5]
    print(f"Valor de la variable" {i})

Esto concatena la variable con el texto, la f es necesaria para que python sepa que es una notacion especial 
-----------------------------------------------------------
LEN

len("Juan")  ----> devuelve 4
------------------------------------------------------------------------------------
BUCLE WHILE

while i<10:
    instruccion 
------------------------------------------------------------------------------------
CONTINUE, PASS Y ELSE 

continue: ignora una vuelta del bucle y salta a la siguiente
pass: el bucle devuelve null si se usa esto 
else: es como en el condicional pero en bucles, este entra una vez que el bucle termino 
------------------------------------------------------------------------------------
GENERADORES

Son estructuras que extraen valores de una funcion y se almaacenan en objetos iterables

def funcion():
    instrucciones

    yield Numericos

La diferencia con las funciones es que la funcion te devuelve todos los valores de golpe y con  el yield te devuelve de uno en uno cada vez que la mandes a llamar 

Se utilizan con listas de vlores infinitos y son mas eficientes que las funciones tradicionales
------------------------------------------------------------------------------------
NEXT()

sirve para los generadores next(variableAlmacenaYield)
-------------------------------------------------------------------------------------
YIELD FROM 

Sirve para simplificar codigo si se usan bucles anidados 

def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
        for subelemento in elemento:
            yield subelemento

Este es un ciclo anidado y se sustituye con:

def devuelve_ciudades(*ciudades):
    for elemento in ciudades:
            yield from elemento 
-------------------------------------------------------------------------------------
EXCEPCIONES

Es un error en tiempo de ejecucion, la excepcion sirve para que el programa no pare la ejecucion por este error.


def divide(num1,num2):

    try:
        return num1/num2
    except ZeroDivisionError:
        print("No se puede dividir entre 0)
        return "Operacion erronea"
---------------------------------------------
Se pueden poner varios excepts en cada try 

    try:
        return num1/num2
    except ZeroDivisionError:
        print("No se puede dividir entre 0)
        return "Operacion erronea"
    except ValueError:
        print("El valor introducido es incorrecto")
    finally:
        lo que pongas aqui se va a ejecutar siempre, ocurra un error o no 
---------------------------------------------
RAISE EN EXCEPCIONES

if edad<0:
    raise TypeError("No se permiten edades negativas")
---------------------------------------------
MODULOS 

Son un archivo con extension .py o .pyc o archivo escrito en C par aCPython. Poseen su propio espacio de nombres y puede tener variables, funciones, clases o otros modulos.

Sirve para organizar y reutilizar codigo.

import nombre_del_archivo_a_llamar

nombre_del_archivo_a_llamar.sumar(1,2)

---------------------------------

Para evitar escribir el nombre del archivo cada que mandemos llamar una funcion:

from nombre_archivo import sumar 

sumar(7,5)
----------------------------------
Pra importar todas las funicones de un archivo:

from archivo import *
-------------------------------------------------------------------------------
PAQUETES 

Directorios donde se alamacenaran modulos relacionados entre si 

solo hay que crear una carpeta con un archivo __init__.py

para mandar llamar algo de un paquete la sintaxis es:

from paquete.archivo import *
--------------------------------------------------------------------------------
PAQUETES DISTRIBUIBLES 

Para distribuir paquetes de otras carpetas diferentes al proyecto. 

En la raiz del proyecto se crea un archivo llamado "setup.py" y ese archivo lleva lo siguiente:

---------------------------------

from setuptools import setup 

setup(
    name="paquetecalculos",
    version="1.0",
    description="Explicar que hace este paquete",
    autor="Juan",
    author_email="email"
    url="url"
    packages="ruta donde se encuentra el paquete que se quiere empaquetar"

)

despues tenemos que ir a la ruta de la carpeta desde cmd y escribir:

python setup.py sdist

esto genera 2 carpetas para el paquete y en uno viene un tar comprimido 

Para instalar este paquete, desde la consola debes ir al directorio donde lo quieras poner y poner en cmd:
pip3 install paquete.tar.gz

AL MOMENTO DE IMPORTAR EL PAQUETE O LAS FUNCIONES DEL PAQUETE, FORMA PARTE YA DEL PYTHON DESDE EL SO POR LO QUE SE PODRIA LLAMAR DESDE CUALQUIER ARCHIVO 
----------------------------------------------------------------------------------
ARCHIVOS EXTERNOS 

El ciclo de vida de un archivo es:

CREACION-->APERTURA--->MANIPULACION--->CIERRE

---------------------
EJEMPLO ARCHIVOS 

from io import open 
archivo_textto=open("Nombre archivo a abrir","modo en el que se abrira")    ------>el modo puede ser lectura,escritura y append 
archivo_texto=open("archivo.txt","w")
frase="Buen dia para estudiar python \n el Miercoles"
archivo_texto.write(frase)
archivo_texto.close

-----------------------------
ABRIR EN MODO LECTURA

from io import open 
archivo_texto=open("archivo.txt","r")
texto=archivo_texto.read()
archivo_texto.close
----------------------------
LEER LINEA POR LINEA DEL ARCHIVO Y GUARDARLO EN UNA LISTA 

from io import open 
archivo_texto=open("archivo.txt","r")
linea_texto=archivo_texto.readlines()   ----> lineas texto sería una lista 
archivo_texto.close
---------------------------
Agregar una nueva linea (Append)

from io import open 
archivo_texto=open("archivo.txt","a")
texto=archivo_texto.write("\n nueva linea")   
archivo_texto.close
------------------------------------------------------------------------------------------
PUNTEROS EN PYTHON 

Cuando abrimos un archivo nos puede permitir en donde situar el cursor al abrir un archivo 

seek(5)   ---->le dices al puntero que se ponga en la posicion 5

archivo.seek(0)

------------------------------------------------------------------------------------------
Serialización

Consiste en guardar en un fichero externo en codigo binario, una coleccion o un objeto.

Ejemplo: si se quiere distribuir un diccionario se debe codificar en binario si se quiere tener mayor optimizacion

Se necesita la biblioteca "Pickle" que tiene los metodos:
dump():volcado de dato al fichero binario externo
load():carga de datos del fichero binario externo 


PARA CREARLO

lista=[]
fichero_binario=open("lista","wb")
Pickle.dump(lista, fichero_binario)
fichero_binario.close()

PARA LEERLO

fichero=open("lista","rb")
lista=Pickle.load(fichero)

-------------------------------------------------------------------------------------
BASES DE DATOS 

Puede manipular, SQL Server, Oracle, Mysql, PostgreSQL 

PASOS:
1.-Abrir-crear una conexion 
2.-Crear puntero 
3.-Ejecutar Query
4.-Manejar los resultados de la consulta
5.-Cerrar puntero 
6.-Cerrar conexion 
--------------------------------------------
EJEMPLO SQLITE

import sqlite3 

miConexion=sqlite3.connect("Base de ejemplo")
miCursor=miConexion.cursor()
miCursor.execute("CREATE TABLE PRODUCTOS (NOMBRE_ARTICULO) VARCHAR(50), PRECIO INTEGER, SECCION VARCHAR(20)")
miCursor.execute("INSERT INTO PRODUCTOS VALUES('BALÓN',100,'DEPORTES')")
miConexion.commit()   ---------> esta linea es para confirmar que queremos ejecutar los cambios dichos en execute 
miConexion.close()
--------------------------------------------
EJEMPLO LISTAS Y TUPLAS PARA INSERTAR REGISTROS

varioProductos=[
    ("Camiseta", 10, "Deportes")
    ("Jarron",90,"Ceramica")
]

miCursor.executemany("INSERT INTO PRODUCTOS VALUES (?,?,?))", varioProductos)
miConexion.commit()

PARA LEER UNA BD Y VACIARLA EN UNA LISTA 

miCursor.execute("SELECT * FROM PRODUCTOS")
varioProductos=miCursor.fetchall()
-----------------------------------------------
CLAVES PRINCIPALES EN BD 

miCursor.execute('''
    CREATE TABLE PRODUCTOS(
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOMBRE_ARTICULO VARCHAR(50),
    PRECIO INTEGER,
    SECCION VARCHAR(20)    
    )
''')

miCursor.executemany("INSERT INTO PRODUCTOS VALUES (NULL,?,?,?))", varioProductos) ---> el null para el id autoincrementable
---------------------------------------------------------------------
FUNCIONES LAMBDA

 Es una funcion anonima y sirve para ahorrar tiempo.

 area_triangulo=lambda base,altura:(bse*altura)/2      --->solo pueden devolver un calculo y no hacer ciclos ni CONDICIONALES

-------------------------------------------------------------------------
FUNCION FILTER

Devuelve los elementos que cumplen una caracteristica 

def numero_par(num):

if num % 2==0:
    return true


numeros=[1,2,3,4,5,6]

print(list(filter(numero_par, numeros)))
----------------------------------------------------------------------------
FUNCION MAP 

Aplica una funcion a cada elemento de una lista iterable devolviendo una lista con resultados 

def calculo_comision(empleado):
    empleado.salario=empleado.salario*1.03
    return empleado

listaEmpleados=map(calculo_comision, listaEmpleados)

---------------------------------------------------------------------------------------
EXPRESIONES REGULARES 

Sirven para el trabajo y procesamiento de texto.

Busca un texto que se ajusta a un formato DETERMINADO
buscar si existe o no una cadena dentro de un texto 
contar el numero de coincidencias dentro de un texto 

------------------------------------------
import re 

cadena="Vamos a aprender expresiones regulares"

print(re.search("aprender", cadena))     ----> va a buscar la palabra aprender en la cadena, devuelve un objeto con matched y si no está devuelve none 
-------------

textoEncontrado=re.search("aprender", cadena)
print(textoEncontrado.start()) ---------------------->devuelve el caracter donde comienza el texto en la cadena 
print(textoEncontrado.end()) ----------------------> devuelve el caracter donde finaliza el texto en la cadena 
print(textoEncontrado.end()) ----------------------> devuelve donde empieza y termina 

re.findall(textoABuscar, cadena)  ------> devuelve una lista con todos los strings que coinciden con la busqueda 

-------------------------------------------------------
METACARACTERES(anclas)

lista=["Jorge","Karla","Edgar"]

for e in lista[]:

if re.findall('^Sandra',lista):    -------------> ^ este metacaracter es para que devuelva todos los que comienza por Sandra

if re.findall('Jorge$', elemento)  -------------> $ este metacaracter es para que devuelva los que terminan en Jorge 

                                   -------------> [sfg]  con los corchetes sirven para saber si esos caracteres estan en una cadena sin importar el orden 
                                   -------------> 'niñ[oa]s' te devolveria tanto niños como niñas ya que la a y la o estan dentro de los corchetes 

 -------------------------------------------------------------
 RANGOS

[o-t]  -----> nos devuelvelos elementos de la lista que tengan letras entre la o y la t 
[^o-t]  -----> es el complemento, todos los que no estan en el rango de o a t
[o-t1-3] ----> en el rango o a t y luego en el rango 1 a 3 

----------------------------------------------------------------
MATCH 

busca un match con un elemento que empieze segun el parametro de match 

if re.match("Jorge",nombre, re.IGNORECASE):

".ara"---------->expresion regular para todos los que empiezan por cualquier letra y terminan en ara

search ---> es como match pero en vez de solo buscar en el inicio de la cadena, busca en toda la cadena 






















 









































